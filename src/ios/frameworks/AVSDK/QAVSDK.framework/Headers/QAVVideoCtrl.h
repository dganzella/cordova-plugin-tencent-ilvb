#import "QAVCommon.h"#import "QAVError.h"#import <AVFoundation/AVFoundation.h>#import <Foundation/Foundation.h>@protocol QAVRemoteVideoDelegate;@protocol QAVLocalVideoDelegate;@protocol QAVScreenVideoDelegate;@protocol QAVMediaVideoDelegate;/*! @abstract      摄像头操作回调 @param         result          错误码。 @see           QAVResult */typedef void (^cameraOptionComplete)(int result);/*! @discussion    摄像头采集分辨率*/typedef NS_ENUM(NSInteger, QAVCameraPreset) {      QAVPresetType320240  = 1,    QAVPresetType480360  = 2,    QAVPresetType640480  = 3,    QAVPresetType640368  = 4,    QAVPresetType960540  = 5,    QAVPresetType1280720 = 6,    QAVPresetType192144  = 7,    QAVPresetType320180  = 8,};/*! @discussion    摄像头方向 */typedef NS_ENUM(NSInteger, cameraPos) {    CameraPosFront = 0, ///< 前置摄像头    CameraPosBack  = 1, ///< 后置摄像头};/*! @discussion    采集角度，0,1,2,3分别对应iOS四个采集角度，4表示关闭外部设定 */typedef NS_ENUM(NSInteger, rotateAngle) {    OrientationLandscapeRight = 0,      // Device oriented horizontally, home button on the left    OrientationPortrait = 1,            // Device oriented vertically, home button on the bottom    OrientationLandscapeLeft = 2,       // Device oriented horizontally, home button on the right    OrientationPortraitUpsideDown = 3,  // Device oriented vertically, home button on the top    OrientationUnknown = 4,             // close external orientation};/*! @discussion    视频控制器的封装类 */@interface QAVVideoCtrl : NSObject/*! @abstract      摄像头是否打开 */@property (assign, nonatomic) BOOL isCameraOn;/*! @abstract      切换摄像头 @param         pos             摄像头的前后方向。具体参照cameraPos                                 CameraPosFront = 0,                                CameraPosBack  = 1,  @param         block           返回切换摄像头的结果是成功还是失败的block (^cameraOptionComplete)  @return        成功返回QAV_OK, 其他情况请参照QAVResult。 @see           QAVResult   */- (QAVResult)switchCamera:(cameraPos)pos complete:(cameraOptionComplete)block;/*! @abstract      打开/关闭摄像头 @param         pos             摄像头的前后方向。具体参照cameraPos                                 CameraPosFront = 0,                                CameraPosBack  = 1,  @param         bEnable         是否打开 @param         block           返回打开摄像头的结果是成功还是失败的block (^cameraOptionComplete)  @return        成功返回QAV_OK, 其他情况请参照QAVResult。  @see           QAVResult */- (QAVResult)enableCamera:(cameraPos)pos isEnable:(BOOL)bEnable complete:(cameraOptionComplete)block;/*! @abstract      请求/清除视频发送权限 @param         isEnable        是否请求  @return        成功返回QAV_OK, 其他情况请参照QAVResult。  @see           QAVResult */- (QAVResult)enableCameraSendPermission:(BOOL)isEnable;/*! @abstract      打开/关闭摄像头预览 @param         pos             摄像头的前后方向。具体参照cameraPos  CameraPosFront = 0, CameraPosBack  = 1,  @param         bEnable         是否打开 @param         block           返回打开摄像头预览的结果是成功还是失败的block (^cameraOptionComplete)  @return        成功返回QAV_OK, 其他情况请参照QAVResult。  @see           QAVResult */- (QAVResult)enableCameraPreview:(cameraPos)pos isEnable:(BOOL)bEnable complete:(cameraOptionComplete)block;/*! @abstract      判断当前摄像头为前置还是后置 @return        返回当前摄像头是否为前置摄像头 */- (BOOL)isFrontcamera;/*! @abstract      设置角度 @param         rotateAngle屏幕角度 @see           rotateAngle @return        成功返回QAV_OK, 其他情况请参照QAVResult。 @see           QAVResult */- (QAVResult)setRotation:(rotateAngle)rotate;/*! @abstract      设置用远端视频设备输出远端视频的代理。 @param         delegate        远端视频流委托对象，都统一传递继承QAVRemoteVideoDelegate的委托对象。 */- (void)setRemoteVideoDelegate:(id<QAVRemoteVideoDelegate>)delegate;/*! @abstract      设置打开本地输入视频流的代理。 @param         delegate        本地输入视频流委托对象，都统一传递继承QAVLocalVideoDelegate的委托对象。 */- (void)setLocalVideoDelegate:(id<QAVLocalVideoDelegate>)delegate;/*! @abstract      设置打开远端屏幕分享视频流的代理。 @param         delegate        输入屏幕分享视频流委托对象，都统一传递继承QAVScreenVideoDelegate的委托对象。*/- (void)setScreenVideoDelegate:(id<QAVScreenVideoDelegate>)delegate;/*! @abstract      设置打开远端播片视频流的代理。 @param         delegate        输入屏幕分享视频流委托对象，都统一传递继承QAVMediaVideoDelegate的委托对象。 */- (void)setMediaVideoDelegate:(id<QAVMediaVideoDelegate>)delegate;/*! @abstract      打开关闭外部视频捕获设备。 @param         isEnableExternalCapture 是否开启外部视频捕获设备 @param         shouldRender SDK是否渲染输入流视频数据，true表示会，false表示不会 @return        成功返回QAV_OK, 否则返回QAV_ERR_FAIL。 @see           QAVResult */- (QAVResult)enableExternalCapture:(BOOL)isEnableExternalCapture shouldRender:(BOOL)shouldRender;/*! @abstract      向音视频SDK传入捕获的视频帧。  @param         frame           视频帧数据及相关参数。  @discussion    - 要控制好传入视频帧的频率，具体频率视实际使用场景而定。</br>                - 图像颜色格式。现在已经支持多种格式。</br>                - 视频源类型。当前仅支持QAVVIDEO_SRC_TYPE_CAMERA。</br>  @return        成功返回QAV_OK, 否则返回QAV_ERR_FAIL。 @see           QAVVideoFrame */- (int)fillExternalCaptureFrame:(QAVVideoFrame *)frame;/*! @abstract      获取摄像头视频的预览layer。 @return        返回值AVCaptureVideoPreviewLayer实例。失败时返回nil。 */- (AVCaptureVideoPreviewLayer *)getPreviewLayer;/*! @abstract      获取本地摄像头的CaptureSession @return        返回值AVCaptureSession实例。失败时返回nil。 */- (AVCaptureSession *)getCaptureSession;/*! @abstract      查询是否支持美颜。 @discussion    支持美颜的机型为:iphone4s及以上,ipad1及以上，ipodtouch5及以上。 @return        返回值为true时表示支持，否则表示不支持。 */- (BOOL)isEnableBeauty;/*! @abstract      设置美颜程度参数。打开之后美颜功能并传递美颜程度参数 @param         beautyParam     美颜程度参数。 @discussion    param取值范围在0-9之间，0代表关闭美颜。 */- (void)inputBeautyParam:(float)beautyParam;/*! @abstract      设置美白程度参数。 @param         beautyParam     美颜程度参数。 @discussion    param取值范围在0-9之间，0代表关闭美白，通常跟美颜开关和美颜参数一起调用,支持美颜的机型就支持美白，因此也可以通过调用isEnableBeauty进行判断 */- (void)inputWhiteningParam:(float)beautyParam;/*! @abstract      添加水印到某一编码分辨率。一个编码分辨率对应一个水印图片。 @param         preset          对应的编码分辨率，具体参照cameraPos。                                 QAVPresetType320240  = 1,                                QAVPresetType480360  = 2,                                QAVPresetType640480  = 3,                                QAVPresetType640368  = 4,                                QAVPresetType960540  = 5,                                QAVPresetType1280720 = 6,                                QAVPresetType192144  = 7,                                QAVPresetType320180  = 8,  @param         watermark       水印图片必须先加载成UIImage。格式的话一般是建议png  @discussion    - 这个接口注意在startcontext成功后，打开摄像头之前调。</br>                - 注意水印的大小不能超过preset参数里的宽的1/4,高的1/6。</br>                - 水印的宽、高必须是2的整数倍。</br>  @return        成功返回QAV_OK, 否则返回QAV_ERR_FAIL。  @see           QAVCameraPreset  QAVResult  */- (QAVResult)addWaterMark:(QAVCameraPreset)preset image:(UIImage *)watermark;/*! @abstract      获取通话中实时视频质量相关信息，业务侧可以不用关心，主要用来查看通话情况、排查问题等。 @return        以字符串形式返回视频相关的质量参数。 */- (NSString *)getQualityTips;@end/*! @discussion    远端视频委托协议 */@protocol QAVRemoteVideoDelegate <NSObject>@required/*! @abstract      远程画面回调 @param         frameData       远端视频帧数据 @see           QAVVideoFrame */- (void)OnVideoPreview:(QAVVideoFrame *)frameData;@end/*! @discussion    本地视频委托协议 */@protocol QAVLocalVideoDelegate <NSObject>@required/*! @abstract      本地画面预览回调 @param         frameData       本地视频帧数据 @see           QAVVideoFrame */- (void)OnLocalVideoPreview:(QAVVideoFrame *)frameData;/*! @abstract      本地画面预处理视频回调，修改了data的数据后会在编码后传给服务器。 @param         frameData       本地视频帧数据 @see           QAVVideoFrame */- (void)OnLocalVideoPreProcess:(QAVVideoFrame *)frameData;/*! @abstract      摄像头返回的本地画面原始数据 @param         buf             本地视频帧原始数据 @param         ret             本地视频帧原始数据 */- (void)OnLocalVideoRawSampleBuf:(CMSampleBufferRef)buf result:(CMSampleBufferRef *)ret;@end/*! @discussion    屏幕分享委托协议 */@protocol QAVScreenVideoDelegate <NSObject>@required/*! @abstract      屏幕分享画面回调 @param         frameData       屏幕分享视频帧数据 @see           QAVVideoFrame */- (void)OnVideoPreview:(QAVVideoFrame *)frameData;@end/*! @discussion    播片委托协议 */@protocol QAVMediaVideoDelegate <NSObject>@required/*! @abstract      播片画面回调，预留接口，暂时不建议使用 @param         frameData       播片视频帧数据 @see           QAVVideoFrame */- (void)OnVideoPreview:(QAVVideoFrame *)frameData;@end