/*! sdk_version = 1.9.5.8 */#import "QAVAppChannel.h"#import "QAVAudioCtrl.h"#import "QAVCommon.h"#import "QAVEndpoint.h"#import "QAVError.h"#import "QAVRoomMulti.h"#import "QAVSpearEnginCtrl.h"#import "QAVVideoCtrl.h"#import <Foundation/Foundation.h>/*! @discussion    QAVContext对象配置信息 */@interface QAVContextStartParam : NSObject/*! @abstract      用户的账号类型 */@property (copy, nonatomic) NSString *accountType;/*! @abstract      用户名 */@property (copy, nonatomic) NSString *identifier;/*! @abstract      App用户使用OAuth授权体系分配的Appid */@property (copy, nonatomic) NSString *appidAt3rd;/*! @abstract      用户标识接入SDK的应用ID */@property (assign, nonatomic) int sdkAppId;/*! @abstract      Spear引擎参数设置方式，默认为QAVSpearEngineCtrlTypeCloud。 */@property (assign, nonatomic) QAVSpearEngineCtrlType engineCtrlType;@end/*! @discussion    QAVContext的状态类型 */typedef NS_ENUM(NSInteger, QAVContextState) {    QAVContextStateStop     = 0,    ///< 初始状态，QAVContext的createInstance成功之后，调用QAVContext的stop之后均为此状态。    QAVContextStateStarting = 1,    ///< 正在启动，APP调用QAVContext的start之后，QAVContext会从QAVContextStateStop切换到此状态。    QAVContextStateStartOK  = 2,    ///< 已经启动，QAVContext start结束之后，QAVContext会从QAVContextStateStarting切换到此状态。};/*! @discussion    QAVContext对象封装类，代表着一个SDK运行实例 */@interface QAVContext : NSObject/*! @abstract      QAVContext对象配置信息。 */@property (retain, nonatomic) QAVContextStartParam *param;/*! @abstract      QAVContext当前的状态 */@property (readonly, nonatomic) QAVContextState state;/*! @abstract      音视频房间(只有进入房间后以下属性才有用) */@property (readonly, nonatomic) QAVRoomMulti *room;/*! @abstract      音频控制器 */@property (readonly, nonatomic) QAVAudioCtrl *audioCtrl;/*! @abstract      视频控制器 */@property (readonly, nonatomic) QAVVideoCtrl *videoCtrl;/*! @abstract      Spear流控引擎模式云配置方式 */@property (readonly, nonatomic) QAVCloudSpearEngineCtrl *cloudSpearCtrl;/*! @abstract      Spear流控引擎模式自定义方式 */@property (readonly, nonatomic) QAVCustomSpearEngineCtrl *customSpearCtrl;/*! @abstract      获得SDK的版本信息。 @return        SDK的版本号信息由四个数字组成，数字间以小数点分隔，四个数字的含义依次是：                - 主版本号                - 子版本号                - 修订版本号                - 编译版本号 @warning       SDK在特性变化和Bug修复之后，会升级版本信息重新发布。 */+ (NSString *)getVersion;/*! @abstract      创建QAVContext对象。 @discussion    App使用SDK总是从CreateContext开始的，该静态成员函数返回一个新的QAVContext实例。 @return        成功则返回QAVContext的实例指针；否则返回nil。 @warning       - 创建成功之后，App需要进一步调用StartContext来启动QAVContext对象。</br>                - App必须保证QAVContext实例的唯一性，</br>                - 同时启动多个实例会因为设备占用等原因，出现无法预料的结果。</br> */+ (QAVContext *)CreateContext;/*! @abstract      销毁目前的QAVContext的单例对象。  @discussion    需要在CreateContext之后才能调用。 */- (void)destroy;/*! @abstract      启动QAVContext对象。 @discussion    StartContext是一个异步操作，内部会启动工作线程，创建各种内部对象。  @param         param           QAVContext对象配置信息 @param         completion      返回启动Context的结果的block (^QAVCompletionHandler)。  @see           QAVContextStartParam  QAVCompletionHandler @warning       - 只有当异步操作启动成功的时候，才会通过回调函数异步返回执行结果；</br>                - 当异步操作启动失败的时候，直接通过方法的返回值返回错误，不会再触发回调函数；</br>                - App收到block回调的时候，表示StartContext执行完毕；</br>                - startContext执行成功之后，App才能进一步调用QAVContext的其他成员函数；</br>                - startContext执行成功之后，App必须调用stopContext来终止QAVContext对象。</br> @warning       以下两点约定也适用于SDK的其他异步操作接口：</br>                - 只有当异步操作启动成功的时候，才会通过回调函数异步返回执行结果；</br>                - 当异步操作启动失败的时候，直接通过方法的返回值返回错误，不会再触发回调函数。</br> */- (void)startWithParam:(QAVContextStartParam *)param            completion:(QAVCompletionHandler)completion;/*! @abstract      终止QAVContext对象。 @discussion    stop是一个异步操作，内部会终止工作线程，销毁各种内部对象。 @return        成功返回QAV_OK, 其他情况请参照QAVResult。  @see           QAVResult @warning       - App应该设法保证startContext和stopContext的配对调用；</br>                - stopContext如果当前还没退出音视频房间，会结束失败，要先调用ExitRoom；</br> */- (QAVResult)stop;/*! @abstract      进入音视频房间。 @discussion    enterRoom: delegate:是一个异步操作，内部会连接服务器，申请进入音视频房间。 @param         param           进入房间所需的参数，必须传递QAVMultiParam类型的参数。 @param         dlg             房间委托对象 @return        异步操作执行结果通过继承QAVRoomDelegate的委托对象的OnEnterRoomComplete()返回。                 QAV_OK                        启动成功。                QAV_ERR_CONTEXT_NOT_START     AVContext没有启动。                QAV_ERR_ROOM_NOT_EXITED       没有退出上一个音视频房间。                QAV_ERR_INVALID_ARGUMENT      委托或房间配置信息为空，或者委托和房间类型不匹配。  @see           QAVMultiParam @warning       EnterRoom必须在StartContext执行成功之后调用才有效。</br>                目前同一时刻只支持进入一个音视频房间，所以：</br>                - 调用EnterRoom之前，必须先退出上一个音视频房间；</br>                - 如果当前AVContext中已经存在一个音视频房间，调用EnterRoom会同步返回失败。</br> */- (void)enterRoom:(QAVMultiParam *)param delegate:(id<QAVRoomDelegate>)dlg;/*! @abstract      平滑切换房间 @discussion    switchRoomWithChangedInfo:是一个异步操作，内部会在不释放音视频设备的情况下连接。</br> 服务器切换音视频房间，此切房方案相较于此前的方案"退旧房进新房",速度上会快很多。</br> @param         param      新房间相比原房间发生变化的信息 */- (void)switchRoomWithChangedInfo:(QAVChangeRoomInfo *)param;/*! @abstract      退出音视频房间。 @discussion    exitRoom是一个异步操作，内部会连接服务器，申请退出音视频房间。 @return        - 返回值表示异步操作启动是否成功；</br>                - 异步操作执行结果通过继承QAVRoomDelegate的委托对象的OnExitRoomComplete()返回。</br>                - QAV_OK 启动成功。</br>                - 其他值 启动失败。</br>  @see           QAVResult */- (QAVResult)exitRoom;/*! @abstract      平滑切换房间 @discussion    switchRoom:是一个异步操作，内部会在不释放音视频设备的情况下连接。</br>                服务器切换音视频房间，此切房方案相较于此前的方案"退旧房进新房",速度上会快很多。</br> @param         relationId      业务侧的房间id */- (void)switchRoom:(int)relationId;/*! @abstract      设置appp version @discussion    同步操作。</br> @param         appVersion      业务侧的应用版本号 */- (void)setAppVersion:(NSString*)appVersion;/*! @abstract      设置sdk log等级 @discussion    1: error 用于关键日志; 2: info 用于提示信息; 3: debug 用于开发调试; 4: verbose 用于高频打印类信息。 @param         level      log等级 @return        - AV_OK：设置成功； </br>                - AV_ERR_INVALID_ARGUMENT：设置等级非上述范围 */- (int)setLogLevel:(int)level;/*! @abstract      获取sdk当前的log等级 @return        - 取值范围:正常1-4; </br>                - 发生错误-1 */- (int)getLogLevel;/*! @abstract      在进房前预览前初始化摄像头的参数，避免与进房后参数不对导致闪屏 @discussion    如果需要在进房前做enableCamera的操作，则可以在调用enableCamera之前调用该接口，其他情况不要调用 @return        成功返回QAV_OK, 其他情况请参照QAVResult。 */- (QAVResult)initCameraSettingWithWidth:(int)width height:(int)height fps:(int)fps;@end
